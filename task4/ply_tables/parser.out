Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S -> program
Rule 1     program -> expression
Rule 2     expression -> assignment
Rule 3     expression -> logical_expr
Rule 4     assignment -> ID ASSIGN expression
Rule 5     logical_expr -> logical_expr OR logical_term
Rule 6     logical_expr -> logical_term
Rule 7     logical_term -> logical_term AND logical_factor
Rule 8     logical_term -> logical_factor
Rule 9     logical_factor -> NOT logical_factor
Rule 10    logical_factor -> relational_expr
Rule 11    relational_expr -> relational_expr EQ additive_expr
Rule 12    relational_expr -> relational_expr NEQ additive_expr
Rule 13    relational_expr -> relational_expr LT additive_expr
Rule 14    relational_expr -> relational_expr LE additive_expr
Rule 15    relational_expr -> relational_expr GT additive_expr
Rule 16    relational_expr -> relational_expr GE additive_expr
Rule 17    relational_expr -> additive_expr
Rule 18    additive_expr -> additive_expr PLUS multiplicative_expr
Rule 19    additive_expr -> additive_expr MINUS multiplicative_expr
Rule 20    additive_expr -> multiplicative_expr
Rule 21    multiplicative_expr -> multiplicative_expr MUL unary_expr
Rule 22    multiplicative_expr -> multiplicative_expr DIV unary_expr
Rule 23    multiplicative_expr -> unary_expr
Rule 24    unary_expr -> MINUS unary_expr
Rule 25    unary_expr -> primary_expr
Rule 26    primary_expr -> LPAREN expression RPAREN
Rule 27    primary_expr -> ID
Rule 28    primary_expr -> NUMBER
Rule 29    primary_expr -> TRUE
Rule 30    primary_expr -> FALSE
Rule 31    primary_expr -> function_definition
Rule 32    primary_expr -> function_call
Rule 33    function_definition -> ID LPAREN argument_list RPAREN LBRACE expression RBRACE
Rule 34    function_call -> ID LPAREN argument_list RPAREN
Rule 35    argument_list -> argument_list COMMA expression
Rule 36    argument_list -> expression

Terminals, with rules where they appear

AND                  : 7
ASSIGN               : 4
COMMA                : 35
DIV                  : 22
EQ                   : 11
FALSE                : 30
GE                   : 16
GT                   : 15
ID                   : 4 27 33 34
LBRACE               : 33
LE                   : 14
LPAREN               : 26 33 34
LT                   : 13
MINUS                : 19 24
MUL                  : 21
NEQ                  : 12
NOT                  : 9
NUMBER               : 28
OR                   : 5
PLUS                 : 18
RBRACE               : 33
RPAREN               : 26 33 34
TRUE                 : 29
error                : 

Nonterminals, with rules where they appear

additive_expr        : 11 12 13 14 15 16 17 18 19
argument_list        : 33 34 35
assignment           : 2
expression           : 1 4 26 33 35 36
function_call        : 32
function_definition  : 31
logical_expr         : 3 5
logical_factor       : 7 8 9
logical_term         : 5 6 7
multiplicative_expr  : 18 19 20 21 22
primary_expr         : 25
program              : 0
relational_expr      : 10 11 12 13 14 15 16
unary_expr           : 21 22 23 24

Parsing method: LALR

state 0

    (0) S -> . program
    (1) program -> . expression
    (2) expression -> . assignment
    (3) expression -> . logical_expr
    (4) assignment -> . ID ASSIGN expression
    (5) logical_expr -> . logical_expr OR logical_term
    (6) logical_expr -> . logical_term
    (7) logical_term -> . logical_term AND logical_factor
    (8) logical_term -> . logical_factor
    (9) logical_factor -> . NOT logical_factor
    (10) logical_factor -> . relational_expr
    (11) relational_expr -> . relational_expr EQ additive_expr
    (12) relational_expr -> . relational_expr NEQ additive_expr
    (13) relational_expr -> . relational_expr LT additive_expr
    (14) relational_expr -> . relational_expr LE additive_expr
    (15) relational_expr -> . relational_expr GT additive_expr
    (16) relational_expr -> . relational_expr GE additive_expr
    (17) relational_expr -> . additive_expr
    (18) additive_expr -> . additive_expr PLUS multiplicative_expr
    (19) additive_expr -> . additive_expr MINUS multiplicative_expr
    (20) additive_expr -> . multiplicative_expr
    (21) multiplicative_expr -> . multiplicative_expr MUL unary_expr
    (22) multiplicative_expr -> . multiplicative_expr DIV unary_expr
    (23) multiplicative_expr -> . unary_expr
    (24) unary_expr -> . MINUS unary_expr
    (25) unary_expr -> . primary_expr
    (26) primary_expr -> . LPAREN expression RPAREN
    (27) primary_expr -> . ID
    (28) primary_expr -> . NUMBER
    (29) primary_expr -> . TRUE
    (30) primary_expr -> . FALSE
    (31) primary_expr -> . function_definition
    (32) primary_expr -> . function_call
    (33) function_definition -> . ID LPAREN argument_list RPAREN LBRACE expression RBRACE
    (34) function_call -> . ID LPAREN argument_list RPAREN

    ID              shift and go to state 5
    NOT             shift and go to state 8
    MINUS           shift and go to state 12
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18

    program                        shift and go to state 1
    expression                     shift and go to state 2
    assignment                     shift and go to state 3
    logical_expr                   shift and go to state 4
    logical_term                   shift and go to state 6
    logical_factor                 shift and go to state 7
    relational_expr                shift and go to state 9
    additive_expr                  shift and go to state 10
    multiplicative_expr            shift and go to state 11
    unary_expr                     shift and go to state 13
    primary_expr                   shift and go to state 14
    function_definition            shift and go to state 19
    function_call                  shift and go to state 20

state 1

    (0) S -> program .



state 2

    (1) program -> expression .

    $end            reduce using rule 1 (program -> expression .)


state 3

    (2) expression -> assignment .

    $end            reduce using rule 2 (expression -> assignment .)
    RPAREN          reduce using rule 2 (expression -> assignment .)
    COMMA           reduce using rule 2 (expression -> assignment .)
    RBRACE          reduce using rule 2 (expression -> assignment .)


state 4

    (3) expression -> logical_expr .
    (5) logical_expr -> logical_expr . OR logical_term

    $end            reduce using rule 3 (expression -> logical_expr .)
    RPAREN          reduce using rule 3 (expression -> logical_expr .)
    COMMA           reduce using rule 3 (expression -> logical_expr .)
    RBRACE          reduce using rule 3 (expression -> logical_expr .)
    OR              shift and go to state 21


state 5

    (4) assignment -> ID . ASSIGN expression
    (27) primary_expr -> ID .
    (33) function_definition -> ID . LPAREN argument_list RPAREN LBRACE expression RBRACE
    (34) function_call -> ID . LPAREN argument_list RPAREN

    ASSIGN          shift and go to state 22
    MUL             reduce using rule 27 (primary_expr -> ID .)
    DIV             reduce using rule 27 (primary_expr -> ID .)
    PLUS            reduce using rule 27 (primary_expr -> ID .)
    MINUS           reduce using rule 27 (primary_expr -> ID .)
    EQ              reduce using rule 27 (primary_expr -> ID .)
    NEQ             reduce using rule 27 (primary_expr -> ID .)
    LT              reduce using rule 27 (primary_expr -> ID .)
    LE              reduce using rule 27 (primary_expr -> ID .)
    GT              reduce using rule 27 (primary_expr -> ID .)
    GE              reduce using rule 27 (primary_expr -> ID .)
    AND             reduce using rule 27 (primary_expr -> ID .)
    OR              reduce using rule 27 (primary_expr -> ID .)
    $end            reduce using rule 27 (primary_expr -> ID .)
    RPAREN          reduce using rule 27 (primary_expr -> ID .)
    COMMA           reduce using rule 27 (primary_expr -> ID .)
    RBRACE          reduce using rule 27 (primary_expr -> ID .)
    LPAREN          shift and go to state 23


state 6

    (6) logical_expr -> logical_term .
    (7) logical_term -> logical_term . AND logical_factor

    OR              reduce using rule 6 (logical_expr -> logical_term .)
    $end            reduce using rule 6 (logical_expr -> logical_term .)
    RPAREN          reduce using rule 6 (logical_expr -> logical_term .)
    COMMA           reduce using rule 6 (logical_expr -> logical_term .)
    RBRACE          reduce using rule 6 (logical_expr -> logical_term .)
    AND             shift and go to state 24


state 7

    (8) logical_term -> logical_factor .

    AND             reduce using rule 8 (logical_term -> logical_factor .)
    OR              reduce using rule 8 (logical_term -> logical_factor .)
    $end            reduce using rule 8 (logical_term -> logical_factor .)
    RPAREN          reduce using rule 8 (logical_term -> logical_factor .)
    COMMA           reduce using rule 8 (logical_term -> logical_factor .)
    RBRACE          reduce using rule 8 (logical_term -> logical_factor .)


state 8

    (9) logical_factor -> NOT . logical_factor
    (9) logical_factor -> . NOT logical_factor
    (10) logical_factor -> . relational_expr
    (11) relational_expr -> . relational_expr EQ additive_expr
    (12) relational_expr -> . relational_expr NEQ additive_expr
    (13) relational_expr -> . relational_expr LT additive_expr
    (14) relational_expr -> . relational_expr LE additive_expr
    (15) relational_expr -> . relational_expr GT additive_expr
    (16) relational_expr -> . relational_expr GE additive_expr
    (17) relational_expr -> . additive_expr
    (18) additive_expr -> . additive_expr PLUS multiplicative_expr
    (19) additive_expr -> . additive_expr MINUS multiplicative_expr
    (20) additive_expr -> . multiplicative_expr
    (21) multiplicative_expr -> . multiplicative_expr MUL unary_expr
    (22) multiplicative_expr -> . multiplicative_expr DIV unary_expr
    (23) multiplicative_expr -> . unary_expr
    (24) unary_expr -> . MINUS unary_expr
    (25) unary_expr -> . primary_expr
    (26) primary_expr -> . LPAREN expression RPAREN
    (27) primary_expr -> . ID
    (28) primary_expr -> . NUMBER
    (29) primary_expr -> . TRUE
    (30) primary_expr -> . FALSE
    (31) primary_expr -> . function_definition
    (32) primary_expr -> . function_call
    (33) function_definition -> . ID LPAREN argument_list RPAREN LBRACE expression RBRACE
    (34) function_call -> . ID LPAREN argument_list RPAREN

    NOT             shift and go to state 8
    MINUS           shift and go to state 12
    LPAREN          shift and go to state 15
    ID              shift and go to state 26
    NUMBER          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18

    logical_factor                 shift and go to state 25
    relational_expr                shift and go to state 9
    additive_expr                  shift and go to state 10
    multiplicative_expr            shift and go to state 11
    unary_expr                     shift and go to state 13
    primary_expr                   shift and go to state 14
    function_definition            shift and go to state 19
    function_call                  shift and go to state 20

state 9

    (10) logical_factor -> relational_expr .
    (11) relational_expr -> relational_expr . EQ additive_expr
    (12) relational_expr -> relational_expr . NEQ additive_expr
    (13) relational_expr -> relational_expr . LT additive_expr
    (14) relational_expr -> relational_expr . LE additive_expr
    (15) relational_expr -> relational_expr . GT additive_expr
    (16) relational_expr -> relational_expr . GE additive_expr

    AND             reduce using rule 10 (logical_factor -> relational_expr .)
    OR              reduce using rule 10 (logical_factor -> relational_expr .)
    $end            reduce using rule 10 (logical_factor -> relational_expr .)
    RPAREN          reduce using rule 10 (logical_factor -> relational_expr .)
    COMMA           reduce using rule 10 (logical_factor -> relational_expr .)
    RBRACE          reduce using rule 10 (logical_factor -> relational_expr .)
    EQ              shift and go to state 27
    NEQ             shift and go to state 28
    LT              shift and go to state 29
    LE              shift and go to state 30
    GT              shift and go to state 31
    GE              shift and go to state 32


state 10

    (17) relational_expr -> additive_expr .
    (18) additive_expr -> additive_expr . PLUS multiplicative_expr
    (19) additive_expr -> additive_expr . MINUS multiplicative_expr

    EQ              reduce using rule 17 (relational_expr -> additive_expr .)
    NEQ             reduce using rule 17 (relational_expr -> additive_expr .)
    LT              reduce using rule 17 (relational_expr -> additive_expr .)
    LE              reduce using rule 17 (relational_expr -> additive_expr .)
    GT              reduce using rule 17 (relational_expr -> additive_expr .)
    GE              reduce using rule 17 (relational_expr -> additive_expr .)
    AND             reduce using rule 17 (relational_expr -> additive_expr .)
    OR              reduce using rule 17 (relational_expr -> additive_expr .)
    $end            reduce using rule 17 (relational_expr -> additive_expr .)
    RPAREN          reduce using rule 17 (relational_expr -> additive_expr .)
    COMMA           reduce using rule 17 (relational_expr -> additive_expr .)
    RBRACE          reduce using rule 17 (relational_expr -> additive_expr .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34


state 11

    (20) additive_expr -> multiplicative_expr .
    (21) multiplicative_expr -> multiplicative_expr . MUL unary_expr
    (22) multiplicative_expr -> multiplicative_expr . DIV unary_expr

    PLUS            reduce using rule 20 (additive_expr -> multiplicative_expr .)
    MINUS           reduce using rule 20 (additive_expr -> multiplicative_expr .)
    EQ              reduce using rule 20 (additive_expr -> multiplicative_expr .)
    NEQ             reduce using rule 20 (additive_expr -> multiplicative_expr .)
    LT              reduce using rule 20 (additive_expr -> multiplicative_expr .)
    LE              reduce using rule 20 (additive_expr -> multiplicative_expr .)
    GT              reduce using rule 20 (additive_expr -> multiplicative_expr .)
    GE              reduce using rule 20 (additive_expr -> multiplicative_expr .)
    AND             reduce using rule 20 (additive_expr -> multiplicative_expr .)
    OR              reduce using rule 20 (additive_expr -> multiplicative_expr .)
    $end            reduce using rule 20 (additive_expr -> multiplicative_expr .)
    RPAREN          reduce using rule 20 (additive_expr -> multiplicative_expr .)
    COMMA           reduce using rule 20 (additive_expr -> multiplicative_expr .)
    RBRACE          reduce using rule 20 (additive_expr -> multiplicative_expr .)
    MUL             shift and go to state 35
    DIV             shift and go to state 36


state 12

    (24) unary_expr -> MINUS . unary_expr
    (24) unary_expr -> . MINUS unary_expr
    (25) unary_expr -> . primary_expr
    (26) primary_expr -> . LPAREN expression RPAREN
    (27) primary_expr -> . ID
    (28) primary_expr -> . NUMBER
    (29) primary_expr -> . TRUE
    (30) primary_expr -> . FALSE
    (31) primary_expr -> . function_definition
    (32) primary_expr -> . function_call
    (33) function_definition -> . ID LPAREN argument_list RPAREN LBRACE expression RBRACE
    (34) function_call -> . ID LPAREN argument_list RPAREN

    MINUS           shift and go to state 12
    LPAREN          shift and go to state 15
    ID              shift and go to state 26
    NUMBER          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18

    unary_expr                     shift and go to state 37
    primary_expr                   shift and go to state 14
    function_definition            shift and go to state 19
    function_call                  shift and go to state 20

state 13

    (23) multiplicative_expr -> unary_expr .

    MUL             reduce using rule 23 (multiplicative_expr -> unary_expr .)
    DIV             reduce using rule 23 (multiplicative_expr -> unary_expr .)
    PLUS            reduce using rule 23 (multiplicative_expr -> unary_expr .)
    MINUS           reduce using rule 23 (multiplicative_expr -> unary_expr .)
    EQ              reduce using rule 23 (multiplicative_expr -> unary_expr .)
    NEQ             reduce using rule 23 (multiplicative_expr -> unary_expr .)
    LT              reduce using rule 23 (multiplicative_expr -> unary_expr .)
    LE              reduce using rule 23 (multiplicative_expr -> unary_expr .)
    GT              reduce using rule 23 (multiplicative_expr -> unary_expr .)
    GE              reduce using rule 23 (multiplicative_expr -> unary_expr .)
    AND             reduce using rule 23 (multiplicative_expr -> unary_expr .)
    OR              reduce using rule 23 (multiplicative_expr -> unary_expr .)
    $end            reduce using rule 23 (multiplicative_expr -> unary_expr .)
    RPAREN          reduce using rule 23 (multiplicative_expr -> unary_expr .)
    COMMA           reduce using rule 23 (multiplicative_expr -> unary_expr .)
    RBRACE          reduce using rule 23 (multiplicative_expr -> unary_expr .)


state 14

    (25) unary_expr -> primary_expr .

    MUL             reduce using rule 25 (unary_expr -> primary_expr .)
    DIV             reduce using rule 25 (unary_expr -> primary_expr .)
    PLUS            reduce using rule 25 (unary_expr -> primary_expr .)
    MINUS           reduce using rule 25 (unary_expr -> primary_expr .)
    EQ              reduce using rule 25 (unary_expr -> primary_expr .)
    NEQ             reduce using rule 25 (unary_expr -> primary_expr .)
    LT              reduce using rule 25 (unary_expr -> primary_expr .)
    LE              reduce using rule 25 (unary_expr -> primary_expr .)
    GT              reduce using rule 25 (unary_expr -> primary_expr .)
    GE              reduce using rule 25 (unary_expr -> primary_expr .)
    AND             reduce using rule 25 (unary_expr -> primary_expr .)
    OR              reduce using rule 25 (unary_expr -> primary_expr .)
    $end            reduce using rule 25 (unary_expr -> primary_expr .)
    RPAREN          reduce using rule 25 (unary_expr -> primary_expr .)
    COMMA           reduce using rule 25 (unary_expr -> primary_expr .)
    RBRACE          reduce using rule 25 (unary_expr -> primary_expr .)


state 15

    (26) primary_expr -> LPAREN . expression RPAREN
    (2) expression -> . assignment
    (3) expression -> . logical_expr
    (4) assignment -> . ID ASSIGN expression
    (5) logical_expr -> . logical_expr OR logical_term
    (6) logical_expr -> . logical_term
    (7) logical_term -> . logical_term AND logical_factor
    (8) logical_term -> . logical_factor
    (9) logical_factor -> . NOT logical_factor
    (10) logical_factor -> . relational_expr
    (11) relational_expr -> . relational_expr EQ additive_expr
    (12) relational_expr -> . relational_expr NEQ additive_expr
    (13) relational_expr -> . relational_expr LT additive_expr
    (14) relational_expr -> . relational_expr LE additive_expr
    (15) relational_expr -> . relational_expr GT additive_expr
    (16) relational_expr -> . relational_expr GE additive_expr
    (17) relational_expr -> . additive_expr
    (18) additive_expr -> . additive_expr PLUS multiplicative_expr
    (19) additive_expr -> . additive_expr MINUS multiplicative_expr
    (20) additive_expr -> . multiplicative_expr
    (21) multiplicative_expr -> . multiplicative_expr MUL unary_expr
    (22) multiplicative_expr -> . multiplicative_expr DIV unary_expr
    (23) multiplicative_expr -> . unary_expr
    (24) unary_expr -> . MINUS unary_expr
    (25) unary_expr -> . primary_expr
    (26) primary_expr -> . LPAREN expression RPAREN
    (27) primary_expr -> . ID
    (28) primary_expr -> . NUMBER
    (29) primary_expr -> . TRUE
    (30) primary_expr -> . FALSE
    (31) primary_expr -> . function_definition
    (32) primary_expr -> . function_call
    (33) function_definition -> . ID LPAREN argument_list RPAREN LBRACE expression RBRACE
    (34) function_call -> . ID LPAREN argument_list RPAREN

    ID              shift and go to state 5
    NOT             shift and go to state 8
    MINUS           shift and go to state 12
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18

    expression                     shift and go to state 38
    assignment                     shift and go to state 3
    logical_expr                   shift and go to state 4
    logical_term                   shift and go to state 6
    logical_factor                 shift and go to state 7
    relational_expr                shift and go to state 9
    additive_expr                  shift and go to state 10
    multiplicative_expr            shift and go to state 11
    unary_expr                     shift and go to state 13
    primary_expr                   shift and go to state 14
    function_definition            shift and go to state 19
    function_call                  shift and go to state 20

state 16

    (28) primary_expr -> NUMBER .

    MUL             reduce using rule 28 (primary_expr -> NUMBER .)
    DIV             reduce using rule 28 (primary_expr -> NUMBER .)
    PLUS            reduce using rule 28 (primary_expr -> NUMBER .)
    MINUS           reduce using rule 28 (primary_expr -> NUMBER .)
    EQ              reduce using rule 28 (primary_expr -> NUMBER .)
    NEQ             reduce using rule 28 (primary_expr -> NUMBER .)
    LT              reduce using rule 28 (primary_expr -> NUMBER .)
    LE              reduce using rule 28 (primary_expr -> NUMBER .)
    GT              reduce using rule 28 (primary_expr -> NUMBER .)
    GE              reduce using rule 28 (primary_expr -> NUMBER .)
    AND             reduce using rule 28 (primary_expr -> NUMBER .)
    OR              reduce using rule 28 (primary_expr -> NUMBER .)
    $end            reduce using rule 28 (primary_expr -> NUMBER .)
    RPAREN          reduce using rule 28 (primary_expr -> NUMBER .)
    COMMA           reduce using rule 28 (primary_expr -> NUMBER .)
    RBRACE          reduce using rule 28 (primary_expr -> NUMBER .)


state 17

    (29) primary_expr -> TRUE .

    MUL             reduce using rule 29 (primary_expr -> TRUE .)
    DIV             reduce using rule 29 (primary_expr -> TRUE .)
    PLUS            reduce using rule 29 (primary_expr -> TRUE .)
    MINUS           reduce using rule 29 (primary_expr -> TRUE .)
    EQ              reduce using rule 29 (primary_expr -> TRUE .)
    NEQ             reduce using rule 29 (primary_expr -> TRUE .)
    LT              reduce using rule 29 (primary_expr -> TRUE .)
    LE              reduce using rule 29 (primary_expr -> TRUE .)
    GT              reduce using rule 29 (primary_expr -> TRUE .)
    GE              reduce using rule 29 (primary_expr -> TRUE .)
    AND             reduce using rule 29 (primary_expr -> TRUE .)
    OR              reduce using rule 29 (primary_expr -> TRUE .)
    $end            reduce using rule 29 (primary_expr -> TRUE .)
    RPAREN          reduce using rule 29 (primary_expr -> TRUE .)
    COMMA           reduce using rule 29 (primary_expr -> TRUE .)
    RBRACE          reduce using rule 29 (primary_expr -> TRUE .)


state 18

    (30) primary_expr -> FALSE .

    MUL             reduce using rule 30 (primary_expr -> FALSE .)
    DIV             reduce using rule 30 (primary_expr -> FALSE .)
    PLUS            reduce using rule 30 (primary_expr -> FALSE .)
    MINUS           reduce using rule 30 (primary_expr -> FALSE .)
    EQ              reduce using rule 30 (primary_expr -> FALSE .)
    NEQ             reduce using rule 30 (primary_expr -> FALSE .)
    LT              reduce using rule 30 (primary_expr -> FALSE .)
    LE              reduce using rule 30 (primary_expr -> FALSE .)
    GT              reduce using rule 30 (primary_expr -> FALSE .)
    GE              reduce using rule 30 (primary_expr -> FALSE .)
    AND             reduce using rule 30 (primary_expr -> FALSE .)
    OR              reduce using rule 30 (primary_expr -> FALSE .)
    $end            reduce using rule 30 (primary_expr -> FALSE .)
    RPAREN          reduce using rule 30 (primary_expr -> FALSE .)
    COMMA           reduce using rule 30 (primary_expr -> FALSE .)
    RBRACE          reduce using rule 30 (primary_expr -> FALSE .)


state 19

    (31) primary_expr -> function_definition .

    MUL             reduce using rule 31 (primary_expr -> function_definition .)
    DIV             reduce using rule 31 (primary_expr -> function_definition .)
    PLUS            reduce using rule 31 (primary_expr -> function_definition .)
    MINUS           reduce using rule 31 (primary_expr -> function_definition .)
    EQ              reduce using rule 31 (primary_expr -> function_definition .)
    NEQ             reduce using rule 31 (primary_expr -> function_definition .)
    LT              reduce using rule 31 (primary_expr -> function_definition .)
    LE              reduce using rule 31 (primary_expr -> function_definition .)
    GT              reduce using rule 31 (primary_expr -> function_definition .)
    GE              reduce using rule 31 (primary_expr -> function_definition .)
    AND             reduce using rule 31 (primary_expr -> function_definition .)
    OR              reduce using rule 31 (primary_expr -> function_definition .)
    $end            reduce using rule 31 (primary_expr -> function_definition .)
    RPAREN          reduce using rule 31 (primary_expr -> function_definition .)
    COMMA           reduce using rule 31 (primary_expr -> function_definition .)
    RBRACE          reduce using rule 31 (primary_expr -> function_definition .)


state 20

    (32) primary_expr -> function_call .

    MUL             reduce using rule 32 (primary_expr -> function_call .)
    DIV             reduce using rule 32 (primary_expr -> function_call .)
    PLUS            reduce using rule 32 (primary_expr -> function_call .)
    MINUS           reduce using rule 32 (primary_expr -> function_call .)
    EQ              reduce using rule 32 (primary_expr -> function_call .)
    NEQ             reduce using rule 32 (primary_expr -> function_call .)
    LT              reduce using rule 32 (primary_expr -> function_call .)
    LE              reduce using rule 32 (primary_expr -> function_call .)
    GT              reduce using rule 32 (primary_expr -> function_call .)
    GE              reduce using rule 32 (primary_expr -> function_call .)
    AND             reduce using rule 32 (primary_expr -> function_call .)
    OR              reduce using rule 32 (primary_expr -> function_call .)
    $end            reduce using rule 32 (primary_expr -> function_call .)
    RPAREN          reduce using rule 32 (primary_expr -> function_call .)
    COMMA           reduce using rule 32 (primary_expr -> function_call .)
    RBRACE          reduce using rule 32 (primary_expr -> function_call .)


state 21

    (5) logical_expr -> logical_expr OR . logical_term
    (7) logical_term -> . logical_term AND logical_factor
    (8) logical_term -> . logical_factor
    (9) logical_factor -> . NOT logical_factor
    (10) logical_factor -> . relational_expr
    (11) relational_expr -> . relational_expr EQ additive_expr
    (12) relational_expr -> . relational_expr NEQ additive_expr
    (13) relational_expr -> . relational_expr LT additive_expr
    (14) relational_expr -> . relational_expr LE additive_expr
    (15) relational_expr -> . relational_expr GT additive_expr
    (16) relational_expr -> . relational_expr GE additive_expr
    (17) relational_expr -> . additive_expr
    (18) additive_expr -> . additive_expr PLUS multiplicative_expr
    (19) additive_expr -> . additive_expr MINUS multiplicative_expr
    (20) additive_expr -> . multiplicative_expr
    (21) multiplicative_expr -> . multiplicative_expr MUL unary_expr
    (22) multiplicative_expr -> . multiplicative_expr DIV unary_expr
    (23) multiplicative_expr -> . unary_expr
    (24) unary_expr -> . MINUS unary_expr
    (25) unary_expr -> . primary_expr
    (26) primary_expr -> . LPAREN expression RPAREN
    (27) primary_expr -> . ID
    (28) primary_expr -> . NUMBER
    (29) primary_expr -> . TRUE
    (30) primary_expr -> . FALSE
    (31) primary_expr -> . function_definition
    (32) primary_expr -> . function_call
    (33) function_definition -> . ID LPAREN argument_list RPAREN LBRACE expression RBRACE
    (34) function_call -> . ID LPAREN argument_list RPAREN

    NOT             shift and go to state 8
    MINUS           shift and go to state 12
    LPAREN          shift and go to state 15
    ID              shift and go to state 26
    NUMBER          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18

    logical_term                   shift and go to state 39
    logical_factor                 shift and go to state 7
    relational_expr                shift and go to state 9
    additive_expr                  shift and go to state 10
    multiplicative_expr            shift and go to state 11
    unary_expr                     shift and go to state 13
    primary_expr                   shift and go to state 14
    function_definition            shift and go to state 19
    function_call                  shift and go to state 20

state 22

    (4) assignment -> ID ASSIGN . expression
    (2) expression -> . assignment
    (3) expression -> . logical_expr
    (4) assignment -> . ID ASSIGN expression
    (5) logical_expr -> . logical_expr OR logical_term
    (6) logical_expr -> . logical_term
    (7) logical_term -> . logical_term AND logical_factor
    (8) logical_term -> . logical_factor
    (9) logical_factor -> . NOT logical_factor
    (10) logical_factor -> . relational_expr
    (11) relational_expr -> . relational_expr EQ additive_expr
    (12) relational_expr -> . relational_expr NEQ additive_expr
    (13) relational_expr -> . relational_expr LT additive_expr
    (14) relational_expr -> . relational_expr LE additive_expr
    (15) relational_expr -> . relational_expr GT additive_expr
    (16) relational_expr -> . relational_expr GE additive_expr
    (17) relational_expr -> . additive_expr
    (18) additive_expr -> . additive_expr PLUS multiplicative_expr
    (19) additive_expr -> . additive_expr MINUS multiplicative_expr
    (20) additive_expr -> . multiplicative_expr
    (21) multiplicative_expr -> . multiplicative_expr MUL unary_expr
    (22) multiplicative_expr -> . multiplicative_expr DIV unary_expr
    (23) multiplicative_expr -> . unary_expr
    (24) unary_expr -> . MINUS unary_expr
    (25) unary_expr -> . primary_expr
    (26) primary_expr -> . LPAREN expression RPAREN
    (27) primary_expr -> . ID
    (28) primary_expr -> . NUMBER
    (29) primary_expr -> . TRUE
    (30) primary_expr -> . FALSE
    (31) primary_expr -> . function_definition
    (32) primary_expr -> . function_call
    (33) function_definition -> . ID LPAREN argument_list RPAREN LBRACE expression RBRACE
    (34) function_call -> . ID LPAREN argument_list RPAREN

    ID              shift and go to state 5
    NOT             shift and go to state 8
    MINUS           shift and go to state 12
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18

    expression                     shift and go to state 40
    assignment                     shift and go to state 3
    logical_expr                   shift and go to state 4
    logical_term                   shift and go to state 6
    logical_factor                 shift and go to state 7
    relational_expr                shift and go to state 9
    additive_expr                  shift and go to state 10
    multiplicative_expr            shift and go to state 11
    unary_expr                     shift and go to state 13
    primary_expr                   shift and go to state 14
    function_definition            shift and go to state 19
    function_call                  shift and go to state 20

state 23

    (33) function_definition -> ID LPAREN . argument_list RPAREN LBRACE expression RBRACE
    (34) function_call -> ID LPAREN . argument_list RPAREN
    (35) argument_list -> . argument_list COMMA expression
    (36) argument_list -> . expression
    (2) expression -> . assignment
    (3) expression -> . logical_expr
    (4) assignment -> . ID ASSIGN expression
    (5) logical_expr -> . logical_expr OR logical_term
    (6) logical_expr -> . logical_term
    (7) logical_term -> . logical_term AND logical_factor
    (8) logical_term -> . logical_factor
    (9) logical_factor -> . NOT logical_factor
    (10) logical_factor -> . relational_expr
    (11) relational_expr -> . relational_expr EQ additive_expr
    (12) relational_expr -> . relational_expr NEQ additive_expr
    (13) relational_expr -> . relational_expr LT additive_expr
    (14) relational_expr -> . relational_expr LE additive_expr
    (15) relational_expr -> . relational_expr GT additive_expr
    (16) relational_expr -> . relational_expr GE additive_expr
    (17) relational_expr -> . additive_expr
    (18) additive_expr -> . additive_expr PLUS multiplicative_expr
    (19) additive_expr -> . additive_expr MINUS multiplicative_expr
    (20) additive_expr -> . multiplicative_expr
    (21) multiplicative_expr -> . multiplicative_expr MUL unary_expr
    (22) multiplicative_expr -> . multiplicative_expr DIV unary_expr
    (23) multiplicative_expr -> . unary_expr
    (24) unary_expr -> . MINUS unary_expr
    (25) unary_expr -> . primary_expr
    (26) primary_expr -> . LPAREN expression RPAREN
    (27) primary_expr -> . ID
    (28) primary_expr -> . NUMBER
    (29) primary_expr -> . TRUE
    (30) primary_expr -> . FALSE
    (31) primary_expr -> . function_definition
    (32) primary_expr -> . function_call
    (33) function_definition -> . ID LPAREN argument_list RPAREN LBRACE expression RBRACE
    (34) function_call -> . ID LPAREN argument_list RPAREN

    ID              shift and go to state 5
    NOT             shift and go to state 8
    MINUS           shift and go to state 12
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18

    argument_list                  shift and go to state 41
    expression                     shift and go to state 42
    assignment                     shift and go to state 3
    logical_expr                   shift and go to state 4
    logical_term                   shift and go to state 6
    logical_factor                 shift and go to state 7
    relational_expr                shift and go to state 9
    additive_expr                  shift and go to state 10
    multiplicative_expr            shift and go to state 11
    unary_expr                     shift and go to state 13
    primary_expr                   shift and go to state 14
    function_definition            shift and go to state 19
    function_call                  shift and go to state 20

state 24

    (7) logical_term -> logical_term AND . logical_factor
    (9) logical_factor -> . NOT logical_factor
    (10) logical_factor -> . relational_expr
    (11) relational_expr -> . relational_expr EQ additive_expr
    (12) relational_expr -> . relational_expr NEQ additive_expr
    (13) relational_expr -> . relational_expr LT additive_expr
    (14) relational_expr -> . relational_expr LE additive_expr
    (15) relational_expr -> . relational_expr GT additive_expr
    (16) relational_expr -> . relational_expr GE additive_expr
    (17) relational_expr -> . additive_expr
    (18) additive_expr -> . additive_expr PLUS multiplicative_expr
    (19) additive_expr -> . additive_expr MINUS multiplicative_expr
    (20) additive_expr -> . multiplicative_expr
    (21) multiplicative_expr -> . multiplicative_expr MUL unary_expr
    (22) multiplicative_expr -> . multiplicative_expr DIV unary_expr
    (23) multiplicative_expr -> . unary_expr
    (24) unary_expr -> . MINUS unary_expr
    (25) unary_expr -> . primary_expr
    (26) primary_expr -> . LPAREN expression RPAREN
    (27) primary_expr -> . ID
    (28) primary_expr -> . NUMBER
    (29) primary_expr -> . TRUE
    (30) primary_expr -> . FALSE
    (31) primary_expr -> . function_definition
    (32) primary_expr -> . function_call
    (33) function_definition -> . ID LPAREN argument_list RPAREN LBRACE expression RBRACE
    (34) function_call -> . ID LPAREN argument_list RPAREN

    NOT             shift and go to state 8
    MINUS           shift and go to state 12
    LPAREN          shift and go to state 15
    ID              shift and go to state 26
    NUMBER          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18

    logical_factor                 shift and go to state 43
    relational_expr                shift and go to state 9
    additive_expr                  shift and go to state 10
    multiplicative_expr            shift and go to state 11
    unary_expr                     shift and go to state 13
    primary_expr                   shift and go to state 14
    function_definition            shift and go to state 19
    function_call                  shift and go to state 20

state 25

    (9) logical_factor -> NOT logical_factor .

    AND             reduce using rule 9 (logical_factor -> NOT logical_factor .)
    OR              reduce using rule 9 (logical_factor -> NOT logical_factor .)
    $end            reduce using rule 9 (logical_factor -> NOT logical_factor .)
    RPAREN          reduce using rule 9 (logical_factor -> NOT logical_factor .)
    COMMA           reduce using rule 9 (logical_factor -> NOT logical_factor .)
    RBRACE          reduce using rule 9 (logical_factor -> NOT logical_factor .)


state 26

    (27) primary_expr -> ID .
    (33) function_definition -> ID . LPAREN argument_list RPAREN LBRACE expression RBRACE
    (34) function_call -> ID . LPAREN argument_list RPAREN

    MUL             reduce using rule 27 (primary_expr -> ID .)
    DIV             reduce using rule 27 (primary_expr -> ID .)
    PLUS            reduce using rule 27 (primary_expr -> ID .)
    MINUS           reduce using rule 27 (primary_expr -> ID .)
    EQ              reduce using rule 27 (primary_expr -> ID .)
    NEQ             reduce using rule 27 (primary_expr -> ID .)
    LT              reduce using rule 27 (primary_expr -> ID .)
    LE              reduce using rule 27 (primary_expr -> ID .)
    GT              reduce using rule 27 (primary_expr -> ID .)
    GE              reduce using rule 27 (primary_expr -> ID .)
    AND             reduce using rule 27 (primary_expr -> ID .)
    OR              reduce using rule 27 (primary_expr -> ID .)
    $end            reduce using rule 27 (primary_expr -> ID .)
    RPAREN          reduce using rule 27 (primary_expr -> ID .)
    COMMA           reduce using rule 27 (primary_expr -> ID .)
    RBRACE          reduce using rule 27 (primary_expr -> ID .)
    LPAREN          shift and go to state 23


state 27

    (11) relational_expr -> relational_expr EQ . additive_expr
    (18) additive_expr -> . additive_expr PLUS multiplicative_expr
    (19) additive_expr -> . additive_expr MINUS multiplicative_expr
    (20) additive_expr -> . multiplicative_expr
    (21) multiplicative_expr -> . multiplicative_expr MUL unary_expr
    (22) multiplicative_expr -> . multiplicative_expr DIV unary_expr
    (23) multiplicative_expr -> . unary_expr
    (24) unary_expr -> . MINUS unary_expr
    (25) unary_expr -> . primary_expr
    (26) primary_expr -> . LPAREN expression RPAREN
    (27) primary_expr -> . ID
    (28) primary_expr -> . NUMBER
    (29) primary_expr -> . TRUE
    (30) primary_expr -> . FALSE
    (31) primary_expr -> . function_definition
    (32) primary_expr -> . function_call
    (33) function_definition -> . ID LPAREN argument_list RPAREN LBRACE expression RBRACE
    (34) function_call -> . ID LPAREN argument_list RPAREN

    MINUS           shift and go to state 12
    LPAREN          shift and go to state 15
    ID              shift and go to state 26
    NUMBER          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18

    additive_expr                  shift and go to state 44
    multiplicative_expr            shift and go to state 11
    unary_expr                     shift and go to state 13
    primary_expr                   shift and go to state 14
    function_definition            shift and go to state 19
    function_call                  shift and go to state 20

state 28

    (12) relational_expr -> relational_expr NEQ . additive_expr
    (18) additive_expr -> . additive_expr PLUS multiplicative_expr
    (19) additive_expr -> . additive_expr MINUS multiplicative_expr
    (20) additive_expr -> . multiplicative_expr
    (21) multiplicative_expr -> . multiplicative_expr MUL unary_expr
    (22) multiplicative_expr -> . multiplicative_expr DIV unary_expr
    (23) multiplicative_expr -> . unary_expr
    (24) unary_expr -> . MINUS unary_expr
    (25) unary_expr -> . primary_expr
    (26) primary_expr -> . LPAREN expression RPAREN
    (27) primary_expr -> . ID
    (28) primary_expr -> . NUMBER
    (29) primary_expr -> . TRUE
    (30) primary_expr -> . FALSE
    (31) primary_expr -> . function_definition
    (32) primary_expr -> . function_call
    (33) function_definition -> . ID LPAREN argument_list RPAREN LBRACE expression RBRACE
    (34) function_call -> . ID LPAREN argument_list RPAREN

    MINUS           shift and go to state 12
    LPAREN          shift and go to state 15
    ID              shift and go to state 26
    NUMBER          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18

    additive_expr                  shift and go to state 45
    multiplicative_expr            shift and go to state 11
    unary_expr                     shift and go to state 13
    primary_expr                   shift and go to state 14
    function_definition            shift and go to state 19
    function_call                  shift and go to state 20

state 29

    (13) relational_expr -> relational_expr LT . additive_expr
    (18) additive_expr -> . additive_expr PLUS multiplicative_expr
    (19) additive_expr -> . additive_expr MINUS multiplicative_expr
    (20) additive_expr -> . multiplicative_expr
    (21) multiplicative_expr -> . multiplicative_expr MUL unary_expr
    (22) multiplicative_expr -> . multiplicative_expr DIV unary_expr
    (23) multiplicative_expr -> . unary_expr
    (24) unary_expr -> . MINUS unary_expr
    (25) unary_expr -> . primary_expr
    (26) primary_expr -> . LPAREN expression RPAREN
    (27) primary_expr -> . ID
    (28) primary_expr -> . NUMBER
    (29) primary_expr -> . TRUE
    (30) primary_expr -> . FALSE
    (31) primary_expr -> . function_definition
    (32) primary_expr -> . function_call
    (33) function_definition -> . ID LPAREN argument_list RPAREN LBRACE expression RBRACE
    (34) function_call -> . ID LPAREN argument_list RPAREN

    MINUS           shift and go to state 12
    LPAREN          shift and go to state 15
    ID              shift and go to state 26
    NUMBER          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18

    additive_expr                  shift and go to state 46
    multiplicative_expr            shift and go to state 11
    unary_expr                     shift and go to state 13
    primary_expr                   shift and go to state 14
    function_definition            shift and go to state 19
    function_call                  shift and go to state 20

state 30

    (14) relational_expr -> relational_expr LE . additive_expr
    (18) additive_expr -> . additive_expr PLUS multiplicative_expr
    (19) additive_expr -> . additive_expr MINUS multiplicative_expr
    (20) additive_expr -> . multiplicative_expr
    (21) multiplicative_expr -> . multiplicative_expr MUL unary_expr
    (22) multiplicative_expr -> . multiplicative_expr DIV unary_expr
    (23) multiplicative_expr -> . unary_expr
    (24) unary_expr -> . MINUS unary_expr
    (25) unary_expr -> . primary_expr
    (26) primary_expr -> . LPAREN expression RPAREN
    (27) primary_expr -> . ID
    (28) primary_expr -> . NUMBER
    (29) primary_expr -> . TRUE
    (30) primary_expr -> . FALSE
    (31) primary_expr -> . function_definition
    (32) primary_expr -> . function_call
    (33) function_definition -> . ID LPAREN argument_list RPAREN LBRACE expression RBRACE
    (34) function_call -> . ID LPAREN argument_list RPAREN

    MINUS           shift and go to state 12
    LPAREN          shift and go to state 15
    ID              shift and go to state 26
    NUMBER          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18

    additive_expr                  shift and go to state 47
    multiplicative_expr            shift and go to state 11
    unary_expr                     shift and go to state 13
    primary_expr                   shift and go to state 14
    function_definition            shift and go to state 19
    function_call                  shift and go to state 20

state 31

    (15) relational_expr -> relational_expr GT . additive_expr
    (18) additive_expr -> . additive_expr PLUS multiplicative_expr
    (19) additive_expr -> . additive_expr MINUS multiplicative_expr
    (20) additive_expr -> . multiplicative_expr
    (21) multiplicative_expr -> . multiplicative_expr MUL unary_expr
    (22) multiplicative_expr -> . multiplicative_expr DIV unary_expr
    (23) multiplicative_expr -> . unary_expr
    (24) unary_expr -> . MINUS unary_expr
    (25) unary_expr -> . primary_expr
    (26) primary_expr -> . LPAREN expression RPAREN
    (27) primary_expr -> . ID
    (28) primary_expr -> . NUMBER
    (29) primary_expr -> . TRUE
    (30) primary_expr -> . FALSE
    (31) primary_expr -> . function_definition
    (32) primary_expr -> . function_call
    (33) function_definition -> . ID LPAREN argument_list RPAREN LBRACE expression RBRACE
    (34) function_call -> . ID LPAREN argument_list RPAREN

    MINUS           shift and go to state 12
    LPAREN          shift and go to state 15
    ID              shift and go to state 26
    NUMBER          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18

    additive_expr                  shift and go to state 48
    multiplicative_expr            shift and go to state 11
    unary_expr                     shift and go to state 13
    primary_expr                   shift and go to state 14
    function_definition            shift and go to state 19
    function_call                  shift and go to state 20

state 32

    (16) relational_expr -> relational_expr GE . additive_expr
    (18) additive_expr -> . additive_expr PLUS multiplicative_expr
    (19) additive_expr -> . additive_expr MINUS multiplicative_expr
    (20) additive_expr -> . multiplicative_expr
    (21) multiplicative_expr -> . multiplicative_expr MUL unary_expr
    (22) multiplicative_expr -> . multiplicative_expr DIV unary_expr
    (23) multiplicative_expr -> . unary_expr
    (24) unary_expr -> . MINUS unary_expr
    (25) unary_expr -> . primary_expr
    (26) primary_expr -> . LPAREN expression RPAREN
    (27) primary_expr -> . ID
    (28) primary_expr -> . NUMBER
    (29) primary_expr -> . TRUE
    (30) primary_expr -> . FALSE
    (31) primary_expr -> . function_definition
    (32) primary_expr -> . function_call
    (33) function_definition -> . ID LPAREN argument_list RPAREN LBRACE expression RBRACE
    (34) function_call -> . ID LPAREN argument_list RPAREN

    MINUS           shift and go to state 12
    LPAREN          shift and go to state 15
    ID              shift and go to state 26
    NUMBER          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18

    additive_expr                  shift and go to state 49
    multiplicative_expr            shift and go to state 11
    unary_expr                     shift and go to state 13
    primary_expr                   shift and go to state 14
    function_definition            shift and go to state 19
    function_call                  shift and go to state 20

state 33

    (18) additive_expr -> additive_expr PLUS . multiplicative_expr
    (21) multiplicative_expr -> . multiplicative_expr MUL unary_expr
    (22) multiplicative_expr -> . multiplicative_expr DIV unary_expr
    (23) multiplicative_expr -> . unary_expr
    (24) unary_expr -> . MINUS unary_expr
    (25) unary_expr -> . primary_expr
    (26) primary_expr -> . LPAREN expression RPAREN
    (27) primary_expr -> . ID
    (28) primary_expr -> . NUMBER
    (29) primary_expr -> . TRUE
    (30) primary_expr -> . FALSE
    (31) primary_expr -> . function_definition
    (32) primary_expr -> . function_call
    (33) function_definition -> . ID LPAREN argument_list RPAREN LBRACE expression RBRACE
    (34) function_call -> . ID LPAREN argument_list RPAREN

    MINUS           shift and go to state 12
    LPAREN          shift and go to state 15
    ID              shift and go to state 26
    NUMBER          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18

    multiplicative_expr            shift and go to state 50
    unary_expr                     shift and go to state 13
    primary_expr                   shift and go to state 14
    function_definition            shift and go to state 19
    function_call                  shift and go to state 20

state 34

    (19) additive_expr -> additive_expr MINUS . multiplicative_expr
    (21) multiplicative_expr -> . multiplicative_expr MUL unary_expr
    (22) multiplicative_expr -> . multiplicative_expr DIV unary_expr
    (23) multiplicative_expr -> . unary_expr
    (24) unary_expr -> . MINUS unary_expr
    (25) unary_expr -> . primary_expr
    (26) primary_expr -> . LPAREN expression RPAREN
    (27) primary_expr -> . ID
    (28) primary_expr -> . NUMBER
    (29) primary_expr -> . TRUE
    (30) primary_expr -> . FALSE
    (31) primary_expr -> . function_definition
    (32) primary_expr -> . function_call
    (33) function_definition -> . ID LPAREN argument_list RPAREN LBRACE expression RBRACE
    (34) function_call -> . ID LPAREN argument_list RPAREN

    MINUS           shift and go to state 12
    LPAREN          shift and go to state 15
    ID              shift and go to state 26
    NUMBER          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18

    multiplicative_expr            shift and go to state 51
    unary_expr                     shift and go to state 13
    primary_expr                   shift and go to state 14
    function_definition            shift and go to state 19
    function_call                  shift and go to state 20

state 35

    (21) multiplicative_expr -> multiplicative_expr MUL . unary_expr
    (24) unary_expr -> . MINUS unary_expr
    (25) unary_expr -> . primary_expr
    (26) primary_expr -> . LPAREN expression RPAREN
    (27) primary_expr -> . ID
    (28) primary_expr -> . NUMBER
    (29) primary_expr -> . TRUE
    (30) primary_expr -> . FALSE
    (31) primary_expr -> . function_definition
    (32) primary_expr -> . function_call
    (33) function_definition -> . ID LPAREN argument_list RPAREN LBRACE expression RBRACE
    (34) function_call -> . ID LPAREN argument_list RPAREN

    MINUS           shift and go to state 12
    LPAREN          shift and go to state 15
    ID              shift and go to state 26
    NUMBER          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18

    unary_expr                     shift and go to state 52
    primary_expr                   shift and go to state 14
    function_definition            shift and go to state 19
    function_call                  shift and go to state 20

state 36

    (22) multiplicative_expr -> multiplicative_expr DIV . unary_expr
    (24) unary_expr -> . MINUS unary_expr
    (25) unary_expr -> . primary_expr
    (26) primary_expr -> . LPAREN expression RPAREN
    (27) primary_expr -> . ID
    (28) primary_expr -> . NUMBER
    (29) primary_expr -> . TRUE
    (30) primary_expr -> . FALSE
    (31) primary_expr -> . function_definition
    (32) primary_expr -> . function_call
    (33) function_definition -> . ID LPAREN argument_list RPAREN LBRACE expression RBRACE
    (34) function_call -> . ID LPAREN argument_list RPAREN

    MINUS           shift and go to state 12
    LPAREN          shift and go to state 15
    ID              shift and go to state 26
    NUMBER          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18

    unary_expr                     shift and go to state 53
    primary_expr                   shift and go to state 14
    function_definition            shift and go to state 19
    function_call                  shift and go to state 20

state 37

    (24) unary_expr -> MINUS unary_expr .

    MUL             reduce using rule 24 (unary_expr -> MINUS unary_expr .)
    DIV             reduce using rule 24 (unary_expr -> MINUS unary_expr .)
    PLUS            reduce using rule 24 (unary_expr -> MINUS unary_expr .)
    MINUS           reduce using rule 24 (unary_expr -> MINUS unary_expr .)
    EQ              reduce using rule 24 (unary_expr -> MINUS unary_expr .)
    NEQ             reduce using rule 24 (unary_expr -> MINUS unary_expr .)
    LT              reduce using rule 24 (unary_expr -> MINUS unary_expr .)
    LE              reduce using rule 24 (unary_expr -> MINUS unary_expr .)
    GT              reduce using rule 24 (unary_expr -> MINUS unary_expr .)
    GE              reduce using rule 24 (unary_expr -> MINUS unary_expr .)
    AND             reduce using rule 24 (unary_expr -> MINUS unary_expr .)
    OR              reduce using rule 24 (unary_expr -> MINUS unary_expr .)
    $end            reduce using rule 24 (unary_expr -> MINUS unary_expr .)
    RPAREN          reduce using rule 24 (unary_expr -> MINUS unary_expr .)
    COMMA           reduce using rule 24 (unary_expr -> MINUS unary_expr .)
    RBRACE          reduce using rule 24 (unary_expr -> MINUS unary_expr .)


state 38

    (26) primary_expr -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 54


state 39

    (5) logical_expr -> logical_expr OR logical_term .
    (7) logical_term -> logical_term . AND logical_factor

    OR              reduce using rule 5 (logical_expr -> logical_expr OR logical_term .)
    $end            reduce using rule 5 (logical_expr -> logical_expr OR logical_term .)
    RPAREN          reduce using rule 5 (logical_expr -> logical_expr OR logical_term .)
    COMMA           reduce using rule 5 (logical_expr -> logical_expr OR logical_term .)
    RBRACE          reduce using rule 5 (logical_expr -> logical_expr OR logical_term .)
    AND             shift and go to state 24


state 40

    (4) assignment -> ID ASSIGN expression .

    $end            reduce using rule 4 (assignment -> ID ASSIGN expression .)
    RPAREN          reduce using rule 4 (assignment -> ID ASSIGN expression .)
    COMMA           reduce using rule 4 (assignment -> ID ASSIGN expression .)
    RBRACE          reduce using rule 4 (assignment -> ID ASSIGN expression .)


state 41

    (33) function_definition -> ID LPAREN argument_list . RPAREN LBRACE expression RBRACE
    (34) function_call -> ID LPAREN argument_list . RPAREN
    (35) argument_list -> argument_list . COMMA expression

    RPAREN          shift and go to state 55
    COMMA           shift and go to state 56


state 42

    (36) argument_list -> expression .

    RPAREN          reduce using rule 36 (argument_list -> expression .)
    COMMA           reduce using rule 36 (argument_list -> expression .)


state 43

    (7) logical_term -> logical_term AND logical_factor .

    AND             reduce using rule 7 (logical_term -> logical_term AND logical_factor .)
    OR              reduce using rule 7 (logical_term -> logical_term AND logical_factor .)
    $end            reduce using rule 7 (logical_term -> logical_term AND logical_factor .)
    RPAREN          reduce using rule 7 (logical_term -> logical_term AND logical_factor .)
    COMMA           reduce using rule 7 (logical_term -> logical_term AND logical_factor .)
    RBRACE          reduce using rule 7 (logical_term -> logical_term AND logical_factor .)


state 44

    (11) relational_expr -> relational_expr EQ additive_expr .
    (18) additive_expr -> additive_expr . PLUS multiplicative_expr
    (19) additive_expr -> additive_expr . MINUS multiplicative_expr

    EQ              reduce using rule 11 (relational_expr -> relational_expr EQ additive_expr .)
    NEQ             reduce using rule 11 (relational_expr -> relational_expr EQ additive_expr .)
    LT              reduce using rule 11 (relational_expr -> relational_expr EQ additive_expr .)
    LE              reduce using rule 11 (relational_expr -> relational_expr EQ additive_expr .)
    GT              reduce using rule 11 (relational_expr -> relational_expr EQ additive_expr .)
    GE              reduce using rule 11 (relational_expr -> relational_expr EQ additive_expr .)
    AND             reduce using rule 11 (relational_expr -> relational_expr EQ additive_expr .)
    OR              reduce using rule 11 (relational_expr -> relational_expr EQ additive_expr .)
    $end            reduce using rule 11 (relational_expr -> relational_expr EQ additive_expr .)
    RPAREN          reduce using rule 11 (relational_expr -> relational_expr EQ additive_expr .)
    COMMA           reduce using rule 11 (relational_expr -> relational_expr EQ additive_expr .)
    RBRACE          reduce using rule 11 (relational_expr -> relational_expr EQ additive_expr .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34


state 45

    (12) relational_expr -> relational_expr NEQ additive_expr .
    (18) additive_expr -> additive_expr . PLUS multiplicative_expr
    (19) additive_expr -> additive_expr . MINUS multiplicative_expr

    EQ              reduce using rule 12 (relational_expr -> relational_expr NEQ additive_expr .)
    NEQ             reduce using rule 12 (relational_expr -> relational_expr NEQ additive_expr .)
    LT              reduce using rule 12 (relational_expr -> relational_expr NEQ additive_expr .)
    LE              reduce using rule 12 (relational_expr -> relational_expr NEQ additive_expr .)
    GT              reduce using rule 12 (relational_expr -> relational_expr NEQ additive_expr .)
    GE              reduce using rule 12 (relational_expr -> relational_expr NEQ additive_expr .)
    AND             reduce using rule 12 (relational_expr -> relational_expr NEQ additive_expr .)
    OR              reduce using rule 12 (relational_expr -> relational_expr NEQ additive_expr .)
    $end            reduce using rule 12 (relational_expr -> relational_expr NEQ additive_expr .)
    RPAREN          reduce using rule 12 (relational_expr -> relational_expr NEQ additive_expr .)
    COMMA           reduce using rule 12 (relational_expr -> relational_expr NEQ additive_expr .)
    RBRACE          reduce using rule 12 (relational_expr -> relational_expr NEQ additive_expr .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34


state 46

    (13) relational_expr -> relational_expr LT additive_expr .
    (18) additive_expr -> additive_expr . PLUS multiplicative_expr
    (19) additive_expr -> additive_expr . MINUS multiplicative_expr

    EQ              reduce using rule 13 (relational_expr -> relational_expr LT additive_expr .)
    NEQ             reduce using rule 13 (relational_expr -> relational_expr LT additive_expr .)
    LT              reduce using rule 13 (relational_expr -> relational_expr LT additive_expr .)
    LE              reduce using rule 13 (relational_expr -> relational_expr LT additive_expr .)
    GT              reduce using rule 13 (relational_expr -> relational_expr LT additive_expr .)
    GE              reduce using rule 13 (relational_expr -> relational_expr LT additive_expr .)
    AND             reduce using rule 13 (relational_expr -> relational_expr LT additive_expr .)
    OR              reduce using rule 13 (relational_expr -> relational_expr LT additive_expr .)
    $end            reduce using rule 13 (relational_expr -> relational_expr LT additive_expr .)
    RPAREN          reduce using rule 13 (relational_expr -> relational_expr LT additive_expr .)
    COMMA           reduce using rule 13 (relational_expr -> relational_expr LT additive_expr .)
    RBRACE          reduce using rule 13 (relational_expr -> relational_expr LT additive_expr .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34


state 47

    (14) relational_expr -> relational_expr LE additive_expr .
    (18) additive_expr -> additive_expr . PLUS multiplicative_expr
    (19) additive_expr -> additive_expr . MINUS multiplicative_expr

    EQ              reduce using rule 14 (relational_expr -> relational_expr LE additive_expr .)
    NEQ             reduce using rule 14 (relational_expr -> relational_expr LE additive_expr .)
    LT              reduce using rule 14 (relational_expr -> relational_expr LE additive_expr .)
    LE              reduce using rule 14 (relational_expr -> relational_expr LE additive_expr .)
    GT              reduce using rule 14 (relational_expr -> relational_expr LE additive_expr .)
    GE              reduce using rule 14 (relational_expr -> relational_expr LE additive_expr .)
    AND             reduce using rule 14 (relational_expr -> relational_expr LE additive_expr .)
    OR              reduce using rule 14 (relational_expr -> relational_expr LE additive_expr .)
    $end            reduce using rule 14 (relational_expr -> relational_expr LE additive_expr .)
    RPAREN          reduce using rule 14 (relational_expr -> relational_expr LE additive_expr .)
    COMMA           reduce using rule 14 (relational_expr -> relational_expr LE additive_expr .)
    RBRACE          reduce using rule 14 (relational_expr -> relational_expr LE additive_expr .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34


state 48

    (15) relational_expr -> relational_expr GT additive_expr .
    (18) additive_expr -> additive_expr . PLUS multiplicative_expr
    (19) additive_expr -> additive_expr . MINUS multiplicative_expr

    EQ              reduce using rule 15 (relational_expr -> relational_expr GT additive_expr .)
    NEQ             reduce using rule 15 (relational_expr -> relational_expr GT additive_expr .)
    LT              reduce using rule 15 (relational_expr -> relational_expr GT additive_expr .)
    LE              reduce using rule 15 (relational_expr -> relational_expr GT additive_expr .)
    GT              reduce using rule 15 (relational_expr -> relational_expr GT additive_expr .)
    GE              reduce using rule 15 (relational_expr -> relational_expr GT additive_expr .)
    AND             reduce using rule 15 (relational_expr -> relational_expr GT additive_expr .)
    OR              reduce using rule 15 (relational_expr -> relational_expr GT additive_expr .)
    $end            reduce using rule 15 (relational_expr -> relational_expr GT additive_expr .)
    RPAREN          reduce using rule 15 (relational_expr -> relational_expr GT additive_expr .)
    COMMA           reduce using rule 15 (relational_expr -> relational_expr GT additive_expr .)
    RBRACE          reduce using rule 15 (relational_expr -> relational_expr GT additive_expr .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34


state 49

    (16) relational_expr -> relational_expr GE additive_expr .
    (18) additive_expr -> additive_expr . PLUS multiplicative_expr
    (19) additive_expr -> additive_expr . MINUS multiplicative_expr

    EQ              reduce using rule 16 (relational_expr -> relational_expr GE additive_expr .)
    NEQ             reduce using rule 16 (relational_expr -> relational_expr GE additive_expr .)
    LT              reduce using rule 16 (relational_expr -> relational_expr GE additive_expr .)
    LE              reduce using rule 16 (relational_expr -> relational_expr GE additive_expr .)
    GT              reduce using rule 16 (relational_expr -> relational_expr GE additive_expr .)
    GE              reduce using rule 16 (relational_expr -> relational_expr GE additive_expr .)
    AND             reduce using rule 16 (relational_expr -> relational_expr GE additive_expr .)
    OR              reduce using rule 16 (relational_expr -> relational_expr GE additive_expr .)
    $end            reduce using rule 16 (relational_expr -> relational_expr GE additive_expr .)
    RPAREN          reduce using rule 16 (relational_expr -> relational_expr GE additive_expr .)
    COMMA           reduce using rule 16 (relational_expr -> relational_expr GE additive_expr .)
    RBRACE          reduce using rule 16 (relational_expr -> relational_expr GE additive_expr .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34


state 50

    (18) additive_expr -> additive_expr PLUS multiplicative_expr .
    (21) multiplicative_expr -> multiplicative_expr . MUL unary_expr
    (22) multiplicative_expr -> multiplicative_expr . DIV unary_expr

    PLUS            reduce using rule 18 (additive_expr -> additive_expr PLUS multiplicative_expr .)
    MINUS           reduce using rule 18 (additive_expr -> additive_expr PLUS multiplicative_expr .)
    EQ              reduce using rule 18 (additive_expr -> additive_expr PLUS multiplicative_expr .)
    NEQ             reduce using rule 18 (additive_expr -> additive_expr PLUS multiplicative_expr .)
    LT              reduce using rule 18 (additive_expr -> additive_expr PLUS multiplicative_expr .)
    LE              reduce using rule 18 (additive_expr -> additive_expr PLUS multiplicative_expr .)
    GT              reduce using rule 18 (additive_expr -> additive_expr PLUS multiplicative_expr .)
    GE              reduce using rule 18 (additive_expr -> additive_expr PLUS multiplicative_expr .)
    AND             reduce using rule 18 (additive_expr -> additive_expr PLUS multiplicative_expr .)
    OR              reduce using rule 18 (additive_expr -> additive_expr PLUS multiplicative_expr .)
    $end            reduce using rule 18 (additive_expr -> additive_expr PLUS multiplicative_expr .)
    RPAREN          reduce using rule 18 (additive_expr -> additive_expr PLUS multiplicative_expr .)
    COMMA           reduce using rule 18 (additive_expr -> additive_expr PLUS multiplicative_expr .)
    RBRACE          reduce using rule 18 (additive_expr -> additive_expr PLUS multiplicative_expr .)
    MUL             shift and go to state 35
    DIV             shift and go to state 36


state 51

    (19) additive_expr -> additive_expr MINUS multiplicative_expr .
    (21) multiplicative_expr -> multiplicative_expr . MUL unary_expr
    (22) multiplicative_expr -> multiplicative_expr . DIV unary_expr

    PLUS            reduce using rule 19 (additive_expr -> additive_expr MINUS multiplicative_expr .)
    MINUS           reduce using rule 19 (additive_expr -> additive_expr MINUS multiplicative_expr .)
    EQ              reduce using rule 19 (additive_expr -> additive_expr MINUS multiplicative_expr .)
    NEQ             reduce using rule 19 (additive_expr -> additive_expr MINUS multiplicative_expr .)
    LT              reduce using rule 19 (additive_expr -> additive_expr MINUS multiplicative_expr .)
    LE              reduce using rule 19 (additive_expr -> additive_expr MINUS multiplicative_expr .)
    GT              reduce using rule 19 (additive_expr -> additive_expr MINUS multiplicative_expr .)
    GE              reduce using rule 19 (additive_expr -> additive_expr MINUS multiplicative_expr .)
    AND             reduce using rule 19 (additive_expr -> additive_expr MINUS multiplicative_expr .)
    OR              reduce using rule 19 (additive_expr -> additive_expr MINUS multiplicative_expr .)
    $end            reduce using rule 19 (additive_expr -> additive_expr MINUS multiplicative_expr .)
    RPAREN          reduce using rule 19 (additive_expr -> additive_expr MINUS multiplicative_expr .)
    COMMA           reduce using rule 19 (additive_expr -> additive_expr MINUS multiplicative_expr .)
    RBRACE          reduce using rule 19 (additive_expr -> additive_expr MINUS multiplicative_expr .)
    MUL             shift and go to state 35
    DIV             shift and go to state 36


state 52

    (21) multiplicative_expr -> multiplicative_expr MUL unary_expr .

    MUL             reduce using rule 21 (multiplicative_expr -> multiplicative_expr MUL unary_expr .)
    DIV             reduce using rule 21 (multiplicative_expr -> multiplicative_expr MUL unary_expr .)
    PLUS            reduce using rule 21 (multiplicative_expr -> multiplicative_expr MUL unary_expr .)
    MINUS           reduce using rule 21 (multiplicative_expr -> multiplicative_expr MUL unary_expr .)
    EQ              reduce using rule 21 (multiplicative_expr -> multiplicative_expr MUL unary_expr .)
    NEQ             reduce using rule 21 (multiplicative_expr -> multiplicative_expr MUL unary_expr .)
    LT              reduce using rule 21 (multiplicative_expr -> multiplicative_expr MUL unary_expr .)
    LE              reduce using rule 21 (multiplicative_expr -> multiplicative_expr MUL unary_expr .)
    GT              reduce using rule 21 (multiplicative_expr -> multiplicative_expr MUL unary_expr .)
    GE              reduce using rule 21 (multiplicative_expr -> multiplicative_expr MUL unary_expr .)
    AND             reduce using rule 21 (multiplicative_expr -> multiplicative_expr MUL unary_expr .)
    OR              reduce using rule 21 (multiplicative_expr -> multiplicative_expr MUL unary_expr .)
    $end            reduce using rule 21 (multiplicative_expr -> multiplicative_expr MUL unary_expr .)
    RPAREN          reduce using rule 21 (multiplicative_expr -> multiplicative_expr MUL unary_expr .)
    COMMA           reduce using rule 21 (multiplicative_expr -> multiplicative_expr MUL unary_expr .)
    RBRACE          reduce using rule 21 (multiplicative_expr -> multiplicative_expr MUL unary_expr .)


state 53

    (22) multiplicative_expr -> multiplicative_expr DIV unary_expr .

    MUL             reduce using rule 22 (multiplicative_expr -> multiplicative_expr DIV unary_expr .)
    DIV             reduce using rule 22 (multiplicative_expr -> multiplicative_expr DIV unary_expr .)
    PLUS            reduce using rule 22 (multiplicative_expr -> multiplicative_expr DIV unary_expr .)
    MINUS           reduce using rule 22 (multiplicative_expr -> multiplicative_expr DIV unary_expr .)
    EQ              reduce using rule 22 (multiplicative_expr -> multiplicative_expr DIV unary_expr .)
    NEQ             reduce using rule 22 (multiplicative_expr -> multiplicative_expr DIV unary_expr .)
    LT              reduce using rule 22 (multiplicative_expr -> multiplicative_expr DIV unary_expr .)
    LE              reduce using rule 22 (multiplicative_expr -> multiplicative_expr DIV unary_expr .)
    GT              reduce using rule 22 (multiplicative_expr -> multiplicative_expr DIV unary_expr .)
    GE              reduce using rule 22 (multiplicative_expr -> multiplicative_expr DIV unary_expr .)
    AND             reduce using rule 22 (multiplicative_expr -> multiplicative_expr DIV unary_expr .)
    OR              reduce using rule 22 (multiplicative_expr -> multiplicative_expr DIV unary_expr .)
    $end            reduce using rule 22 (multiplicative_expr -> multiplicative_expr DIV unary_expr .)
    RPAREN          reduce using rule 22 (multiplicative_expr -> multiplicative_expr DIV unary_expr .)
    COMMA           reduce using rule 22 (multiplicative_expr -> multiplicative_expr DIV unary_expr .)
    RBRACE          reduce using rule 22 (multiplicative_expr -> multiplicative_expr DIV unary_expr .)


state 54

    (26) primary_expr -> LPAREN expression RPAREN .

    MUL             reduce using rule 26 (primary_expr -> LPAREN expression RPAREN .)
    DIV             reduce using rule 26 (primary_expr -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 26 (primary_expr -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 26 (primary_expr -> LPAREN expression RPAREN .)
    EQ              reduce using rule 26 (primary_expr -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 26 (primary_expr -> LPAREN expression RPAREN .)
    LT              reduce using rule 26 (primary_expr -> LPAREN expression RPAREN .)
    LE              reduce using rule 26 (primary_expr -> LPAREN expression RPAREN .)
    GT              reduce using rule 26 (primary_expr -> LPAREN expression RPAREN .)
    GE              reduce using rule 26 (primary_expr -> LPAREN expression RPAREN .)
    AND             reduce using rule 26 (primary_expr -> LPAREN expression RPAREN .)
    OR              reduce using rule 26 (primary_expr -> LPAREN expression RPAREN .)
    $end            reduce using rule 26 (primary_expr -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 26 (primary_expr -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 26 (primary_expr -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 26 (primary_expr -> LPAREN expression RPAREN .)


state 55

    (33) function_definition -> ID LPAREN argument_list RPAREN . LBRACE expression RBRACE
    (34) function_call -> ID LPAREN argument_list RPAREN .

    LBRACE          shift and go to state 57
    MUL             reduce using rule 34 (function_call -> ID LPAREN argument_list RPAREN .)
    DIV             reduce using rule 34 (function_call -> ID LPAREN argument_list RPAREN .)
    PLUS            reduce using rule 34 (function_call -> ID LPAREN argument_list RPAREN .)
    MINUS           reduce using rule 34 (function_call -> ID LPAREN argument_list RPAREN .)
    EQ              reduce using rule 34 (function_call -> ID LPAREN argument_list RPAREN .)
    NEQ             reduce using rule 34 (function_call -> ID LPAREN argument_list RPAREN .)
    LT              reduce using rule 34 (function_call -> ID LPAREN argument_list RPAREN .)
    LE              reduce using rule 34 (function_call -> ID LPAREN argument_list RPAREN .)
    GT              reduce using rule 34 (function_call -> ID LPAREN argument_list RPAREN .)
    GE              reduce using rule 34 (function_call -> ID LPAREN argument_list RPAREN .)
    AND             reduce using rule 34 (function_call -> ID LPAREN argument_list RPAREN .)
    OR              reduce using rule 34 (function_call -> ID LPAREN argument_list RPAREN .)
    $end            reduce using rule 34 (function_call -> ID LPAREN argument_list RPAREN .)
    RPAREN          reduce using rule 34 (function_call -> ID LPAREN argument_list RPAREN .)
    COMMA           reduce using rule 34 (function_call -> ID LPAREN argument_list RPAREN .)
    RBRACE          reduce using rule 34 (function_call -> ID LPAREN argument_list RPAREN .)


state 56

    (35) argument_list -> argument_list COMMA . expression
    (2) expression -> . assignment
    (3) expression -> . logical_expr
    (4) assignment -> . ID ASSIGN expression
    (5) logical_expr -> . logical_expr OR logical_term
    (6) logical_expr -> . logical_term
    (7) logical_term -> . logical_term AND logical_factor
    (8) logical_term -> . logical_factor
    (9) logical_factor -> . NOT logical_factor
    (10) logical_factor -> . relational_expr
    (11) relational_expr -> . relational_expr EQ additive_expr
    (12) relational_expr -> . relational_expr NEQ additive_expr
    (13) relational_expr -> . relational_expr LT additive_expr
    (14) relational_expr -> . relational_expr LE additive_expr
    (15) relational_expr -> . relational_expr GT additive_expr
    (16) relational_expr -> . relational_expr GE additive_expr
    (17) relational_expr -> . additive_expr
    (18) additive_expr -> . additive_expr PLUS multiplicative_expr
    (19) additive_expr -> . additive_expr MINUS multiplicative_expr
    (20) additive_expr -> . multiplicative_expr
    (21) multiplicative_expr -> . multiplicative_expr MUL unary_expr
    (22) multiplicative_expr -> . multiplicative_expr DIV unary_expr
    (23) multiplicative_expr -> . unary_expr
    (24) unary_expr -> . MINUS unary_expr
    (25) unary_expr -> . primary_expr
    (26) primary_expr -> . LPAREN expression RPAREN
    (27) primary_expr -> . ID
    (28) primary_expr -> . NUMBER
    (29) primary_expr -> . TRUE
    (30) primary_expr -> . FALSE
    (31) primary_expr -> . function_definition
    (32) primary_expr -> . function_call
    (33) function_definition -> . ID LPAREN argument_list RPAREN LBRACE expression RBRACE
    (34) function_call -> . ID LPAREN argument_list RPAREN

    ID              shift and go to state 5
    NOT             shift and go to state 8
    MINUS           shift and go to state 12
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18

    expression                     shift and go to state 58
    assignment                     shift and go to state 3
    logical_expr                   shift and go to state 4
    logical_term                   shift and go to state 6
    logical_factor                 shift and go to state 7
    relational_expr                shift and go to state 9
    additive_expr                  shift and go to state 10
    multiplicative_expr            shift and go to state 11
    unary_expr                     shift and go to state 13
    primary_expr                   shift and go to state 14
    function_definition            shift and go to state 19
    function_call                  shift and go to state 20

state 57

    (33) function_definition -> ID LPAREN argument_list RPAREN LBRACE . expression RBRACE
    (2) expression -> . assignment
    (3) expression -> . logical_expr
    (4) assignment -> . ID ASSIGN expression
    (5) logical_expr -> . logical_expr OR logical_term
    (6) logical_expr -> . logical_term
    (7) logical_term -> . logical_term AND logical_factor
    (8) logical_term -> . logical_factor
    (9) logical_factor -> . NOT logical_factor
    (10) logical_factor -> . relational_expr
    (11) relational_expr -> . relational_expr EQ additive_expr
    (12) relational_expr -> . relational_expr NEQ additive_expr
    (13) relational_expr -> . relational_expr LT additive_expr
    (14) relational_expr -> . relational_expr LE additive_expr
    (15) relational_expr -> . relational_expr GT additive_expr
    (16) relational_expr -> . relational_expr GE additive_expr
    (17) relational_expr -> . additive_expr
    (18) additive_expr -> . additive_expr PLUS multiplicative_expr
    (19) additive_expr -> . additive_expr MINUS multiplicative_expr
    (20) additive_expr -> . multiplicative_expr
    (21) multiplicative_expr -> . multiplicative_expr MUL unary_expr
    (22) multiplicative_expr -> . multiplicative_expr DIV unary_expr
    (23) multiplicative_expr -> . unary_expr
    (24) unary_expr -> . MINUS unary_expr
    (25) unary_expr -> . primary_expr
    (26) primary_expr -> . LPAREN expression RPAREN
    (27) primary_expr -> . ID
    (28) primary_expr -> . NUMBER
    (29) primary_expr -> . TRUE
    (30) primary_expr -> . FALSE
    (31) primary_expr -> . function_definition
    (32) primary_expr -> . function_call
    (33) function_definition -> . ID LPAREN argument_list RPAREN LBRACE expression RBRACE
    (34) function_call -> . ID LPAREN argument_list RPAREN

    ID              shift and go to state 5
    NOT             shift and go to state 8
    MINUS           shift and go to state 12
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 18

    expression                     shift and go to state 59
    assignment                     shift and go to state 3
    logical_expr                   shift and go to state 4
    logical_term                   shift and go to state 6
    logical_factor                 shift and go to state 7
    relational_expr                shift and go to state 9
    additive_expr                  shift and go to state 10
    multiplicative_expr            shift and go to state 11
    unary_expr                     shift and go to state 13
    primary_expr                   shift and go to state 14
    function_definition            shift and go to state 19
    function_call                  shift and go to state 20

state 58

    (35) argument_list -> argument_list COMMA expression .

    RPAREN          reduce using rule 35 (argument_list -> argument_list COMMA expression .)
    COMMA           reduce using rule 35 (argument_list -> argument_list COMMA expression .)


state 59

    (33) function_definition -> ID LPAREN argument_list RPAREN LBRACE expression . RBRACE

    RBRACE          shift and go to state 60


state 60

    (33) function_definition -> ID LPAREN argument_list RPAREN LBRACE expression RBRACE .

    MUL             reduce using rule 33 (function_definition -> ID LPAREN argument_list RPAREN LBRACE expression RBRACE .)
    DIV             reduce using rule 33 (function_definition -> ID LPAREN argument_list RPAREN LBRACE expression RBRACE .)
    PLUS            reduce using rule 33 (function_definition -> ID LPAREN argument_list RPAREN LBRACE expression RBRACE .)
    MINUS           reduce using rule 33 (function_definition -> ID LPAREN argument_list RPAREN LBRACE expression RBRACE .)
    EQ              reduce using rule 33 (function_definition -> ID LPAREN argument_list RPAREN LBRACE expression RBRACE .)
    NEQ             reduce using rule 33 (function_definition -> ID LPAREN argument_list RPAREN LBRACE expression RBRACE .)
    LT              reduce using rule 33 (function_definition -> ID LPAREN argument_list RPAREN LBRACE expression RBRACE .)
    LE              reduce using rule 33 (function_definition -> ID LPAREN argument_list RPAREN LBRACE expression RBRACE .)
    GT              reduce using rule 33 (function_definition -> ID LPAREN argument_list RPAREN LBRACE expression RBRACE .)
    GE              reduce using rule 33 (function_definition -> ID LPAREN argument_list RPAREN LBRACE expression RBRACE .)
    AND             reduce using rule 33 (function_definition -> ID LPAREN argument_list RPAREN LBRACE expression RBRACE .)
    OR              reduce using rule 33 (function_definition -> ID LPAREN argument_list RPAREN LBRACE expression RBRACE .)
    $end            reduce using rule 33 (function_definition -> ID LPAREN argument_list RPAREN LBRACE expression RBRACE .)
    RPAREN          reduce using rule 33 (function_definition -> ID LPAREN argument_list RPAREN LBRACE expression RBRACE .)
    COMMA           reduce using rule 33 (function_definition -> ID LPAREN argument_list RPAREN LBRACE expression RBRACE .)
    RBRACE          reduce using rule 33 (function_definition -> ID LPAREN argument_list RPAREN LBRACE expression RBRACE .)
